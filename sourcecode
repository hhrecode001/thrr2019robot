#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>

using namespace std;

#define int long long
#define F1(i,i1,i2) for(int i=i1 ; i<=i2 ; i++)
#define fi first
#define se second
#define mp make_pair
#define pp pair<int,int>
#define NMAX 203
#define LMAX 1000000007

vector<int> path[NMAX];
vector< pp > kq;
queue< pp > Q;
pp check[NMAX][NMAX];
int n,m,A,B,C,D,r;
int cost[NMAX][NMAX],d[NMAX][NMAX];

void enter()
{
    cin>>n>>m;
    F1(i,0,n-1)
        F1(j,0,n-1)
            if(i==j) cost[i][j] = 0;
            else cost[i][j] = LMAX;
    int x,y,w;
    F1(i,1,m)
    {
        cin>>x>>y>>w;
        path[x].push_back(y); // danh sach ke
        path[y].push_back(x);
        cost[x][y]=w;
        cost[y][x]=w;
    }
    cin>>A>>B>>C>>D>>r;
}

void floyd()
{
    F1(i,0,n-1)
        F1(j,0,n-1)
            if (cost[i][j] != LMAX)
                d[i][j] = cost[i][j];
            else d[i][j] = LMAX;
    //
    F1(k,0,n-1)
        F1(i,0,n-1)
            F1(j,0,n-1)
                d[i][j] = min(d[i][j] , d[i][k]+d[k][j]);
}

void loang(int u,int v)
{
    F1(i,0,(int)path[u].size()-1)
    {
        int x = path[u][i];
        if (check[x][v].fi==-1 && d[x][v]>r){
            check[x][v].fi = u;
            check[x][v].se = v;
            Q.push(mp(x,v));
        }
    }
    F1(i,0,(int)path[v].size()-1)
    {
        int x = path[v][i];
        if (check[u][x].fi==-1 && d[u][x]>r){
            check[u][x].fi = u;
            check[u][x].se = v;
            Q.push(mp(u,x));
        }
    }
}

void solve()
{
    //Tim kiem theo BFS
    int x,y;
    F1(i,0,n-1)
        F1(j,0,n-1)
            check[i][j].fi = -1;
    Q.push(mp(A,B));
    check[A][B].fi = -2;
    while(!Q.empty()){
        x = Q.front().fi;
        y = Q.front().se;
        Q.pop();
        if (x==C && y==D) break;
        loang(x,y);
    }
    if (check[C][D].fi==-1)
    {
        cout<<"Khong the!";
        return;
    }
    pp trace;
    trace.fi = C;
    trace.se = D;
    while(trace.fi!=-2)
    {
        kq.push_back(trace);
        trace = check[trace.fi][trace.se];
    }
    for(int i = (int)kq.size()-1 ; i>=0 ; i--)
        cout<<kq[i].fi<<' '<<kq[i].se<<'\n';
}

main()
{
    freopen("robot.inp","r",stdin);
    freopen("robot.out","w",stdout);
    enter(); //nhap du lieu
    floyd(); //tim khoang canh giua hai dinh
    solve(); //xu li
}
